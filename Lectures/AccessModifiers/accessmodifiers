Access Modifiers in Java
Access modifiers define the visibility of members such as methods, constructors, attributes, and classes. 
Java provides four types of access modifiers: default, private, protected, and public.

1. Default (Package-Private)

Visibility: Accessible only within the same package.
Usage: If no access modifier is specified, the member has default (package-private) access.
Allowed for: Class, constructor, method, and attribute.
Important Note: Default access provides the least visibility, suitable for members that should not be exposed outside the package but are accessible within.


2. Private

Visibility: Accessible only within the same class.
Usage: Members marked as private cannot be accessed outside the class where they are defined.
Allowed for: Constructor, method, and attribute.
Not Allowed for: Classes cannot be marked private (only nested classes can be private).
Modifiers Allowed on Classes: public, abstract, final.
Important Note: Use private for encapsulation, ensuring members are not directly accessible by external classes. This promotes better design practices like using getters and setters.


3. Protected

Visibility:Accessible within the same package.
Accessible outside the package, but only through inheritance (i.e., in child classes).
Usage: Protected members are often used when you want to allow subclassing but prevent direct access from non-subclasses outside the package.
Allowed for: Constructor, method, and attribute.
Important Note: protected strikes a balance between private and public, enabling some access control in inheritance hierarchies while keeping members restricted from non-subclass access.


4. Public
Visibility: Accessible from any class, both within and outside the package.
Usage: Public members are open to all, regardless of package or class boundaries.
Allowed for: Class, constructor, method, and attribute.
Important Note: It's generally recommended not to mark attributes as public unless absolutely necessary (e.g., for constant values), as it breaks encapsulation.


// Class with default (package-private) access modifier
class DefaultClass {
    // Default attribute (no modifier specified)
    String defaultAttribute = "I am a default attribute";

    // Default method (no modifier specified)
    void defaultMethod() {
        System.out.println("I am a default method, accessible within the package.");
    }
}

// Public class that can be accessed from anywhere
public class AccessModifiersExample {
    
    // Private attribute, accessible only within this class
    private String privateAttribute = "I am a private attribute";
    
    // Protected attribute, accessible within the package and through inheritance
    protected String protectedAttribute = "I am a protected attribute";
    
    // Public attribute, accessible from anywhere (use with caution)
    public String publicAttribute = "I am a public attribute";
    
    // Private method, accessible only within this class
    private void privateMethod() {
        System.out.println("I am a private method, accessible only within this class.");
    }
    
    // Protected method, accessible within the package and subclasses
    protected void protectedMethod() {
        System.out.println("I am a protected method, accessible within the package and via inheritance.");
    }

    // Public method, accessible from anywhere
    public void publicMethod() {
        System.out.println("I am a public method, accessible from anywhere.");
    }

    // Main method to test the access modifiers
    public static void main(String[] args) {
        AccessModifiersExample example = new AccessModifiersExample();

        // Accessing attributes and methods within the same class
        System.out.println(example.privateAttribute); // Allowed (within the same class)
        System.out.println(example.protectedAttribute); // Allowed (within the same class)
        System.out.println(example.publicAttribute); // Allowed (within the same class)
        
        example.privateMethod(); // Allowed (within the same class)
        example.protectedMethod(); // Allowed (within the same class)
        example.publicMethod(); // Allowed (within the same class)

        // Creating an object of DefaultClass
        DefaultClass defaultClass = new DefaultClass();
        System.out.println(defaultClass.defaultAttribute); // Allowed (within the same package)
        defaultClass.defaultMethod(); // Allowed (within the same package)

        // Where each modifier is not accessible:
        // Note: The following code represents where members would not be accessible if accessed from other classes.

        // Example from a different class within the same package:
        // - privateAttribute and privateMethod would NOT be accessible.
        // - defaultAttribute and defaultMethod would be accessible (same package).
        // - protectedAttribute and protectedMethod would be accessible (same package).
        // - publicAttribute and publicMethod would be accessible.

        // Example from a different class outside the package:
        // - privateAttribute and privateMethod would NOT be accessible (restricted to the class).
        // - defaultAttribute and defaultMethod would NOT be accessible (restricted to the package).
        // - protectedAttribute and protectedMethod would be accessible ONLY through inheritance (not directly).
        // - publicAttribute and publicMethod would be accessible.

        // Example from a child class in a different package:
        // - privateAttribute and privateMethod would NOT be accessible.
        // - defaultAttribute and defaultMethod would NOT be accessible (not visible outside the package).
        // - protectedAttribute and protectedMethod would be accessible through inheritance (but not directly).
        // - publicAttribute and publicMethod would be accessible.
    }
}
